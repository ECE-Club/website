{"ast":null,"code":"import SetCache from'./_SetCache.js';import arraySome from'./_arraySome.js';import cacheHas from'./_cacheHas.js';/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.\nvar arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.\nwhile(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).\nif(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}export default equalArrays;","map":{"version":3,"names":["SetCache","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push"],"sources":["/Users/venkataramanasripada/Desktop/ece-skule-ca/src/node_modules/lodash-es/_equalArrays.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}