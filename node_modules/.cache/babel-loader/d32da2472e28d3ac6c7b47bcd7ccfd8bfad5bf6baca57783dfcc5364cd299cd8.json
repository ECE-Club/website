{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */'use strict';/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */var invariant=function(condition,format,a,b,c,d,e,f){if(process.env.NODE_ENV!=='production'){if(format===undefined){throw new Error('invariant requires an error message argument');}}if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment '+'for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;// we don't care about invariant's own frame\nthrow error;}};module.exports=invariant;","map":{"version":3,"names":["invariant","condition","format","a","b","c","d","e","f","process","env","NODE_ENV","undefined","Error","error","args","argIndex","replace","name","framesToPop","module","exports"],"sources":["/Users/venkataramanasripada/Desktop/ece-skule-ca/src/node_modules/invariant/browser.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GAEA,YAAY,CAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,GAAI,CAAAA,SAAS,CAAG,QAAAA,CAASC,SAAS,CAAEC,MAAM,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAE,CAC5D,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC,GAAIT,MAAM,GAAKU,SAAS,CAAE,CACxB,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACF,CAEA,GAAI,CAACZ,SAAS,CAAE,CACd,GAAI,CAAAa,KAAK,CACT,GAAIZ,MAAM,GAAKU,SAAS,CAAE,CACxBE,KAAK,CAAG,GAAI,CAAAD,KAAK,CACf,oEAAoE,CACpE,6DACF,CAAC,CACH,CAAC,IAAM,CACL,GAAI,CAAAE,IAAI,CAAG,CAACZ,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAC7B,GAAI,CAAAQ,QAAQ,CAAG,CAAC,CAChBF,KAAK,CAAG,GAAI,CAAAD,KAAK,CACfX,MAAM,CAACe,OAAO,CAAC,KAAK,CAAE,UAAW,CAAE,MAAO,CAAAF,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAE,CAAC,CAC/D,CAAC,CACDF,KAAK,CAACI,IAAI,CAAG,qBAAqB,CACpC,CAEAJ,KAAK,CAACK,WAAW,CAAG,CAAC,CAAE;AACvB,KAAM,CAAAL,KAAK,CACb,CACF,CAAC,CAEDM,MAAM,CAACC,OAAO,CAAGrB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}