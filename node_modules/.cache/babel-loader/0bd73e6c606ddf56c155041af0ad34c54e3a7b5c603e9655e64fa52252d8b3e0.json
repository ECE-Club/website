{"ast":null,"code":"import{useEffect,useRef}from'react';/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */function useCommittedRef(value){const ref=useRef(value);useEffect(()=>{ref.current=value;},[value]);return ref;}export default useCommittedRef;","map":{"version":3,"names":["useEffect","useRef","useCommittedRef","value","ref","current"],"sources":["/Users/venkataramanasripada/Desktop/ece-skule-ca/src/node_modules/@restart/hooks/esm/useCommittedRef.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,eAAeA,CAACC,KAAK,CAAE,CAC9B,KAAM,CAAAC,GAAG,CAAGH,MAAM,CAACE,KAAK,CAAC,CACzBH,SAAS,CAAC,IAAM,CACdI,GAAG,CAACC,OAAO,CAAGF,KAAK,CACrB,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CACX,MAAO,CAAAC,GAAG,CACZ,CACA,cAAe,CAAAF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}