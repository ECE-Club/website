{"ast":null,"code":"import{useEffect,useRef}from'react';/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */export default function usePrevious(value){const ref=useRef(null);useEffect(()=>{ref.current=value;});return ref.current;}","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["/Users/venkataramanasripada/Desktop/ece-skule-ca/src/node_modules/@restart/hooks/esm/usePrevious.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nexport default function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAC,WAAWA,CAACC,KAAK,CAAE,CACzC,KAAM,CAAAC,GAAG,CAAGH,MAAM,CAAC,IAAI,CAAC,CACxBD,SAAS,CAAC,IAAM,CACdI,GAAG,CAACC,OAAO,CAAGF,KAAK,CACrB,CAAC,CAAC,CACF,MAAO,CAAAC,GAAG,CAACC,OAAO,CACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}