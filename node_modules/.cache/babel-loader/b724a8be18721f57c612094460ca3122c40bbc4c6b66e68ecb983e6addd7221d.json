{"ast":null,"code":"import{useCallback}from'react';import useMounted from'./useMounted';/**\n * `useSafeState` takes the return value of a `useState` hook and wraps the\n * setter to prevent updates onces the component has unmounted. Can used\n * with `useMergeState` and `useStateAsync` as well\n *\n * @param state The return value of a useStateHook\n *\n * ```ts\n * const [show, setShow] = useSafeState(useState(true));\n * ```\n */function useSafeState(state){const isMounted=useMounted();return[state[0],useCallback(nextState=>{if(!isMounted())return;return state[1](nextState);},[isMounted,state[1]])];}export default useSafeState;","map":{"version":3,"names":["useCallback","useMounted","useSafeState","state","isMounted","nextState"],"sources":["/Users/venkataramanasripada/Desktop/ece-skule-ca/src/node_modules/@restart/hooks/esm/useSafeState.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMounted from './useMounted';\n\n/**\n * `useSafeState` takes the return value of a `useState` hook and wraps the\n * setter to prevent updates onces the component has unmounted. Can used\n * with `useMergeState` and `useStateAsync` as well\n *\n * @param state The return value of a useStateHook\n *\n * ```ts\n * const [show, setShow] = useSafeState(useState(true));\n * ```\n */\n\nfunction useSafeState(state) {\n  const isMounted = useMounted();\n  return [state[0], useCallback(nextState => {\n    if (!isMounted()) return;\n    return state[1](nextState);\n  }, [isMounted, state[1]])];\n}\nexport default useSafeState;"],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CACnC,MAAO,CAAAC,UAAU,KAAM,cAAc,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAAS,CAAAC,YAAYA,CAACC,KAAK,CAAE,CAC3B,KAAM,CAAAC,SAAS,CAAGH,UAAU,CAAC,CAAC,CAC9B,MAAO,CAACE,KAAK,CAAC,CAAC,CAAC,CAAEH,WAAW,CAACK,SAAS,EAAI,CACzC,GAAI,CAACD,SAAS,CAAC,CAAC,CAAE,OAClB,MAAO,CAAAD,KAAK,CAAC,CAAC,CAAC,CAACE,SAAS,CAAC,CAC5B,CAAC,CAAE,CAACD,SAAS,CAAED,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5B,CACA,cAAe,CAAAD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}